/**
 */
package Android.provider;

import Android.util.AndroidAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class AndroidItemProviderAdapterFactory extends AndroidAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public AndroidItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link Android.Aplicacion} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AplicacionItemProvider aplicacionItemProvider;

	/**
	 * This creates an adapter for a {@link Android.Aplicacion}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAplicacionAdapter() {
		if (aplicacionItemProvider == null) {
			aplicacionItemProvider = new AplicacionItemProvider(this);
		}

		return aplicacionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Android.Activity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActivityItemProvider activityItemProvider;

	/**
	 * This creates an adapter for a {@link Android.Activity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActivityAdapter() {
		if (activityItemProvider == null) {
			activityItemProvider = new ActivityItemProvider(this);
		}

		return activityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Android.Layout} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LayoutItemProvider layoutItemProvider;

	/**
	 * This creates an adapter for a {@link Android.Layout}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLayoutAdapter() {
		if (layoutItemProvider == null) {
			layoutItemProvider = new LayoutItemProvider(this);
		}

		return layoutItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Android.Controlador} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ControladorItemProvider controladorItemProvider;

	/**
	 * This creates an adapter for a {@link Android.Controlador}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createControladorAdapter() {
		if (controladorItemProvider == null) {
			controladorItemProvider = new ControladorItemProvider(this);
		}

		return controladorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Android.EClass0} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EClass0ItemProvider eClass0ItemProvider;

	/**
	 * This creates an adapter for a {@link Android.EClass0}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEClass0Adapter() {
		if (eClass0ItemProvider == null) {
			eClass0ItemProvider = new EClass0ItemProvider(this);
		}

		return eClass0ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Android.Widget} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WidgetItemProvider widgetItemProvider;

	/**
	 * This creates an adapter for a {@link Android.Widget}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWidgetAdapter() {
		if (widgetItemProvider == null) {
			widgetItemProvider = new WidgetItemProvider(this);
		}

		return widgetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Android.Boton} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BotonItemProvider botonItemProvider;

	/**
	 * This creates an adapter for a {@link Android.Boton}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBotonAdapter() {
		if (botonItemProvider == null) {
			botonItemProvider = new BotonItemProvider(this);
		}

		return botonItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Android.EditText} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EditTextItemProvider editTextItemProvider;

	/**
	 * This creates an adapter for a {@link Android.EditText}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEditTextAdapter() {
		if (editTextItemProvider == null) {
			editTextItemProvider = new EditTextItemProvider(this);
		}

		return editTextItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Android.accion} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected accionItemProvider accionItemProvider;

	/**
	 * This creates an adapter for a {@link Android.accion}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createaccionAdapter() {
		if (accionItemProvider == null) {
			accionItemProvider = new accionItemProvider(this);
		}

		return accionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Android.Dialogo} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DialogoItemProvider dialogoItemProvider;

	/**
	 * This creates an adapter for a {@link Android.Dialogo}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDialogoAdapter() {
		if (dialogoItemProvider == null) {
			dialogoItemProvider = new DialogoItemProvider(this);
		}

		return dialogoItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Android.permiso} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected permisoItemProvider permisoItemProvider;

	/**
	 * This creates an adapter for a {@link Android.permiso}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createpermisoAdapter() {
		if (permisoItemProvider == null) {
			permisoItemProvider = new permisoItemProvider(this);
		}

		return permisoItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Android.containers} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected containersItemProvider containersItemProvider;

	/**
	 * This creates an adapter for a {@link Android.containers}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createcontainersAdapter() {
		if (containersItemProvider == null) {
			containersItemProvider = new containersItemProvider(this);
		}

		return containersItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Android.objects} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected objectsItemProvider objectsItemProvider;

	/**
	 * This creates an adapter for a {@link Android.objects}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createobjectsAdapter() {
		if (objectsItemProvider == null) {
			objectsItemProvider = new objectsItemProvider(this);
		}

		return objectsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Android.TextView} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TextViewItemProvider textViewItemProvider;

	/**
	 * This creates an adapter for a {@link Android.TextView}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTextViewAdapter() {
		if (textViewItemProvider == null) {
			textViewItemProvider = new TextViewItemProvider(this);
		}

		return textViewItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (aplicacionItemProvider != null) aplicacionItemProvider.dispose();
		if (activityItemProvider != null) activityItemProvider.dispose();
		if (layoutItemProvider != null) layoutItemProvider.dispose();
		if (controladorItemProvider != null) controladorItemProvider.dispose();
		if (eClass0ItemProvider != null) eClass0ItemProvider.dispose();
		if (widgetItemProvider != null) widgetItemProvider.dispose();
		if (botonItemProvider != null) botonItemProvider.dispose();
		if (editTextItemProvider != null) editTextItemProvider.dispose();
		if (accionItemProvider != null) accionItemProvider.dispose();
		if (dialogoItemProvider != null) dialogoItemProvider.dispose();
		if (permisoItemProvider != null) permisoItemProvider.dispose();
		if (containersItemProvider != null) containersItemProvider.dispose();
		if (objectsItemProvider != null) objectsItemProvider.dispose();
		if (textViewItemProvider != null) textViewItemProvider.dispose();
	}

}
